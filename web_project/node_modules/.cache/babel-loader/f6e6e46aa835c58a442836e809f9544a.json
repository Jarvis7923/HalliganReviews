{"ast":null,"code":"/*! http://mths.be/punycode v1.2.4 by @mathias */\n;\n\n(function (root) {\n  /** Detect free variables */\n  var freeExports = typeof exports == 'object' && exports;\n  var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;\n  var freeGlobal = typeof global == 'object' && global;\n\n  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n    root = freeGlobal;\n  }\n  /**\n   * The `punycode` object.\n   * @name punycode\n   * @type Object\n   */\n\n\n  var punycode,\n\n  /** Highest positive signed 32-bit float value */\n  maxInt = 2147483647,\n      // aka. 0x7FFFFFFF or 2^31-1\n\n  /** Bootstring parameters */\n  base = 36,\n      tMin = 1,\n      tMax = 26,\n      skew = 38,\n      damp = 700,\n      initialBias = 72,\n      initialN = 128,\n      // 0x80\n  delimiter = '-',\n      // '\\x2D'\n\n  /** Regular expressions */\n  regexPunycode = /^xn--/,\n      regexNonASCII = /[^ -~]/,\n      // unprintable ASCII chars + non-ASCII chars\n  regexSeparators = /\\x2E|\\u3002|\\uFF0E|\\uFF61/g,\n      // RFC 3490 separators\n\n  /** Error messages */\n  errors = {\n    'overflow': 'Overflow: input needs wider integers to process',\n    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n    'invalid-input': 'Invalid input'\n  },\n\n  /** Convenience shortcuts */\n  baseMinusTMin = base - tMin,\n      floor = Math.floor,\n      stringFromCharCode = String.fromCharCode,\n\n  /** Temporary variable */\n  key;\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A generic error utility function.\n   * @private\n   * @param {String} type The error type.\n   * @returns {Error} Throws a `RangeError` with the applicable error message.\n   */\n\n  function error(type) {\n    throw RangeError(errors[type]);\n  }\n  /**\n   * A generic `Array#map` utility function.\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} callback The function that gets called for every array\n   * item.\n   * @returns {Array} A new array of values returned by the callback function.\n   */\n\n\n  function map(array, fn) {\n    var length = array.length;\n\n    while (length--) {\n      array[length] = fn(array[length]);\n    }\n\n    return array;\n  }\n  /**\n   * A simple `Array#map`-like wrapper to work with domain name strings.\n   * @private\n   * @param {String} domain The domain name.\n   * @param {Function} callback The function that gets called for every\n   * character.\n   * @returns {Array} A new string of characters returned by the callback\n   * function.\n   */\n\n\n  function mapDomain(string, fn) {\n    return map(string.split(regexSeparators), fn).join('.');\n  }\n  /**\n   * Creates an array containing the numeric code points of each Unicode\n   * character in the string. While JavaScript uses UCS-2 internally,\n   * this function will convert a pair of surrogate halves (each of which\n   * UCS-2 exposes as separate characters) into a single code point,\n   * matching UTF-16.\n   * @see `punycode.ucs2.encode`\n   * @see <http://mathiasbynens.be/notes/javascript-encoding>\n   * @memberOf punycode.ucs2\n   * @name decode\n   * @param {String} string The Unicode input string (UCS-2).\n   * @returns {Array} The new array of code points.\n   */\n\n\n  function ucs2decode(string) {\n    var output = [],\n        counter = 0,\n        length = string.length,\n        value,\n        extra;\n\n    while (counter < length) {\n      value = string.charCodeAt(counter++);\n\n      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n        // high surrogate, and there is a next character\n        extra = string.charCodeAt(counter++);\n\n        if ((extra & 0xFC00) == 0xDC00) {\n          // low surrogate\n          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n        } else {\n          // unmatched surrogate; only append this code unit, in case the next\n          // code unit is the high surrogate of a surrogate pair\n          output.push(value);\n          counter--;\n        }\n      } else {\n        output.push(value);\n      }\n    }\n\n    return output;\n  }\n  /**\n   * Creates a string based on an array of numeric code points.\n   * @see `punycode.ucs2.decode`\n   * @memberOf punycode.ucs2\n   * @name encode\n   * @param {Array} codePoints The array of numeric code points.\n   * @returns {String} The new Unicode string (UCS-2).\n   */\n\n\n  function ucs2encode(array) {\n    return map(array, function (value) {\n      var output = '';\n\n      if (value > 0xFFFF) {\n        value -= 0x10000;\n        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n        value = 0xDC00 | value & 0x3FF;\n      }\n\n      output += stringFromCharCode(value);\n      return output;\n    }).join('');\n  }\n  /**\n   * Converts a basic code point into a digit/integer.\n   * @see `digitToBasic()`\n   * @private\n   * @param {Number} codePoint The basic numeric code point value.\n   * @returns {Number} The numeric value of a basic code point (for use in\n   * representing integers) in the range `0` to `base - 1`, or `base` if\n   * the code point does not represent a value.\n   */\n\n\n  function basicToDigit(codePoint) {\n    if (codePoint - 48 < 10) {\n      return codePoint - 22;\n    }\n\n    if (codePoint - 65 < 26) {\n      return codePoint - 65;\n    }\n\n    if (codePoint - 97 < 26) {\n      return codePoint - 97;\n    }\n\n    return base;\n  }\n  /**\n   * Converts a digit/integer into a basic code point.\n   * @see `basicToDigit()`\n   * @private\n   * @param {Number} digit The numeric value of a basic code point.\n   * @returns {Number} The basic code point whose value (when used for\n   * representing integers) is `digit`, which needs to be in the range\n   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n   * used; else, the lowercase form is used. The behavior is undefined\n   * if `flag` is non-zero and `digit` has no uppercase form.\n   */\n\n\n  function digitToBasic(digit, flag) {\n    //  0..25 map to ASCII a..z or A..Z\n    // 26..35 map to ASCII 0..9\n    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n  }\n  /**\n   * Bias adaptation function as per section 3.4 of RFC 3492.\n   * http://tools.ietf.org/html/rfc3492#section-3.4\n   * @private\n   */\n\n\n  function adapt(delta, numPoints, firstTime) {\n    var k = 0;\n    delta = firstTime ? floor(delta / damp) : delta >> 1;\n    delta += floor(delta / numPoints);\n\n    for (;\n    /* no initialization */\n    delta > baseMinusTMin * tMax >> 1; k += base) {\n      delta = floor(delta / baseMinusTMin);\n    }\n\n    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n  }\n  /**\n   * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n   * symbols.\n   * @memberOf punycode\n   * @param {String} input The Punycode string of ASCII-only symbols.\n   * @returns {String} The resulting string of Unicode symbols.\n   */\n\n\n  function decode(input) {\n    // Don't use UCS-2\n    var output = [],\n        inputLength = input.length,\n        out,\n        i = 0,\n        n = initialN,\n        bias = initialBias,\n        basic,\n        j,\n        index,\n        oldi,\n        w,\n        k,\n        digit,\n        t,\n\n    /** Cached calculation results */\n    baseMinusT; // Handle the basic code points: let `basic` be the number of input code\n    // points before the last delimiter, or `0` if there is none, then copy\n    // the first basic code points to the output.\n\n    basic = input.lastIndexOf(delimiter);\n\n    if (basic < 0) {\n      basic = 0;\n    }\n\n    for (j = 0; j < basic; ++j) {\n      // if it's not a basic code point\n      if (input.charCodeAt(j) >= 0x80) {\n        error('not-basic');\n      }\n\n      output.push(input.charCodeAt(j));\n    } // Main decoding loop: start just after the last delimiter if any basic code\n    // points were copied; start at the beginning otherwise.\n\n\n    for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)\n    /* no final expression */\n    {\n      // `index` is the index of the next character to be consumed.\n      // Decode a generalized variable-length integer into `delta`,\n      // which gets added to `i`. The overflow checking is easier\n      // if we increase `i` as we go, then subtract off its starting\n      // value at the end to obtain `delta`.\n      for (oldi = i, w = 1, k = base;;\n      /* no condition */\n      k += base) {\n        if (index >= inputLength) {\n          error('invalid-input');\n        }\n\n        digit = basicToDigit(input.charCodeAt(index++));\n\n        if (digit >= base || digit > floor((maxInt - i) / w)) {\n          error('overflow');\n        }\n\n        i += digit * w;\n        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n        if (digit < t) {\n          break;\n        }\n\n        baseMinusT = base - t;\n\n        if (w > floor(maxInt / baseMinusT)) {\n          error('overflow');\n        }\n\n        w *= baseMinusT;\n      }\n\n      out = output.length + 1;\n      bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,\n      // incrementing `n` each time, so we'll fix that now:\n\n      if (floor(i / out) > maxInt - n) {\n        error('overflow');\n      }\n\n      n += floor(i / out);\n      i %= out; // Insert `n` at position `i` of the output\n\n      output.splice(i++, 0, n);\n    }\n\n    return ucs2encode(output);\n  }\n  /**\n   * Converts a string of Unicode symbols to a Punycode string of ASCII-only\n   * symbols.\n   * @memberOf punycode\n   * @param {String} input The string of Unicode symbols.\n   * @returns {String} The resulting Punycode string of ASCII-only symbols.\n   */\n\n\n  function encode(input) {\n    var n,\n        delta,\n        handledCPCount,\n        basicLength,\n        bias,\n        j,\n        m,\n        q,\n        k,\n        t,\n        currentValue,\n        output = [],\n\n    /** `inputLength` will hold the number of code points in `input`. */\n    inputLength,\n\n    /** Cached calculation results */\n    handledCPCountPlusOne,\n        baseMinusT,\n        qMinusT; // Convert the input in UCS-2 to Unicode\n\n    input = ucs2decode(input); // Cache the length\n\n    inputLength = input.length; // Initialize the state\n\n    n = initialN;\n    delta = 0;\n    bias = initialBias; // Handle the basic code points\n\n    for (j = 0; j < inputLength; ++j) {\n      currentValue = input[j];\n\n      if (currentValue < 0x80) {\n        output.push(stringFromCharCode(currentValue));\n      }\n    }\n\n    handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;\n    // `basicLength` is the number of basic code points.\n    // Finish the basic string - if it is not empty - with a delimiter\n\n    if (basicLength) {\n      output.push(delimiter);\n    } // Main encoding loop:\n\n\n    while (handledCPCount < inputLength) {\n      // All non-basic code points < n have been handled already. Find the next\n      // larger one:\n      for (m = maxInt, j = 0; j < inputLength; ++j) {\n        currentValue = input[j];\n\n        if (currentValue >= n && currentValue < m) {\n          m = currentValue;\n        }\n      } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n      // but guard against overflow\n\n\n      handledCPCountPlusOne = handledCPCount + 1;\n\n      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n        error('overflow');\n      }\n\n      delta += (m - n) * handledCPCountPlusOne;\n      n = m;\n\n      for (j = 0; j < inputLength; ++j) {\n        currentValue = input[j];\n\n        if (currentValue < n && ++delta > maxInt) {\n          error('overflow');\n        }\n\n        if (currentValue == n) {\n          // Represent delta as a generalized variable-length integer\n          for (q = delta, k = base;;\n          /* no condition */\n          k += base) {\n            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n            if (q < t) {\n              break;\n            }\n\n            qMinusT = q - t;\n            baseMinusT = base - t;\n            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n            q = floor(qMinusT / baseMinusT);\n          }\n\n          output.push(stringFromCharCode(digitToBasic(q, 0)));\n          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n          delta = 0;\n          ++handledCPCount;\n        }\n      }\n\n      ++delta;\n      ++n;\n    }\n\n    return output.join('');\n  }\n  /**\n   * Converts a Punycode string representing a domain name to Unicode. Only the\n   * Punycoded parts of the domain name will be converted, i.e. it doesn't\n   * matter if you call it on a string that has already been converted to\n   * Unicode.\n   * @memberOf punycode\n   * @param {String} domain The Punycode domain name to convert to Unicode.\n   * @returns {String} The Unicode representation of the given Punycode\n   * string.\n   */\n\n\n  function toUnicode(domain) {\n    return mapDomain(domain, function (string) {\n      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n    });\n  }\n  /**\n   * Converts a Unicode string representing a domain name to Punycode. Only the\n   * non-ASCII parts of the domain name will be converted, i.e. it doesn't\n   * matter if you call it with a domain that's already in ASCII.\n   * @memberOf punycode\n   * @param {String} domain The domain name to convert, as a Unicode string.\n   * @returns {String} The Punycode representation of the given domain name.\n   */\n\n\n  function toASCII(domain) {\n    return mapDomain(domain, function (string) {\n      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;\n    });\n  }\n  /*--------------------------------------------------------------------------*/\n\n  /** Define the public API */\n\n\n  punycode = {\n    /**\n     * A string representing the current Punycode.js version number.\n     * @memberOf punycode\n     * @type String\n     */\n    'version': '1.2.4',\n\n    /**\n     * An object of methods to convert from JavaScript's internal character\n     * representation (UCS-2) to Unicode code points, and back.\n     * @see <http://mathiasbynens.be/notes/javascript-encoding>\n     * @memberOf punycode\n     * @type Object\n     */\n    'ucs2': {\n      'decode': ucs2decode,\n      'encode': ucs2encode\n    },\n    'decode': decode,\n    'encode': encode,\n    'toASCII': toASCII,\n    'toUnicode': toUnicode\n  };\n  /** Expose `punycode` */\n  // Some AMD build optimizers, like r.js, check for specific condition patterns\n  // like the following:\n\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    define('punycode', function () {\n      return punycode;\n    });\n  } else if (freeExports && !freeExports.nodeType) {\n    if (freeModule) {\n      // in Node.js or RingoJS v0.8.0+\n      freeModule.exports = punycode;\n    } else {\n      // in Narwhal or RingoJS v0.7.0-\n      for (key in punycode) {\n        punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n      }\n    }\n  } else {\n    // in Rhino or a web browser\n    root.punycode = punycode;\n  }\n})(this);","map":{"version":3,"sources":["/Users/jingkaisu/Documents/HRfront/HalliganReviews/web_project/node_modules/punycode/punycode.js"],"names":["root","freeExports","exports","freeModule","module","freeGlobal","global","window","punycode","maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","baseMinusTMin","floor","Math","stringFromCharCode","String","fromCharCode","key","error","type","RangeError","map","array","fn","length","mapDomain","string","split","join","ucs2decode","output","counter","value","extra","charCodeAt","push","ucs2encode","basicToDigit","codePoint","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","decode","input","inputLength","out","i","n","bias","basic","j","index","oldi","w","t","baseMinusT","lastIndexOf","splice","encode","handledCPCount","basicLength","m","q","currentValue","handledCPCountPlusOne","qMinusT","toUnicode","domain","test","slice","toLowerCase","toASCII","define","amd","nodeType","hasOwnProperty"],"mappings":"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","sourcesContent":["/*! http://mths.be/punycode v1.2.4 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /\\x2E|\\u3002|\\uFF0E|\\uFF61/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\twhile (length--) {\n\t\t\tarray[length] = fn(array[length]);\n\t\t}\n\t\treturn array;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings.\n\t * @private\n\t * @param {String} domain The domain name.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\treturn map(string.split(regexSeparators), fn).join('.');\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <http://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols to a Punycode string of ASCII-only\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name to Unicode. Only the\n\t * Punycoded parts of the domain name will be converted, i.e. it doesn't\n\t * matter if you call it on a string that has already been converted to\n\t * Unicode.\n\t * @memberOf punycode\n\t * @param {String} domain The Punycode domain name to convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(domain) {\n\t\treturn mapDomain(domain, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name to Punycode. Only the\n\t * non-ASCII parts of the domain name will be converted, i.e. it doesn't\n\t * matter if you call it with a domain that's already in ASCII.\n\t * @memberOf punycode\n\t * @param {String} domain The domain name to convert, as a Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name.\n\t */\n\tfunction toASCII(domain) {\n\t\treturn mapDomain(domain, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.2.4',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <http://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n"]},"metadata":{},"sourceType":"script"}