{"ast":null,"code":"// import fakeDB from \"./fakeDataBase\";\nimport { fakeReviewData as fRD, fakeSearchData as fSD } from \"./fakeData\";\n\nconst getReviewResponse = (query, response) => {\n  let {\n    department,\n    number,\n    subnumber,\n    year,\n    semester\n  } = query;\n  const queryStr = (department + number + subnumber + semester + year).toLowerCase();\n  let data = fRD.filter(x => {\n    const info = x.info;\n    return queryStr === (info.department + info.number + info.subnumber + info.semester + info.year).toLowerCase();\n  });\n\n  if (data.length === 0) {\n    response['status'] = false;\n  }\n\n  response['status'] = true;\n  response[\"data\"] = data[0];\n};\n\nconst getSearchResponse = (query, response) => {\n  const queryStr = query.queryString;\n  const result = fSD.filter(x => {\n    const keywordList = queryStr.toLowerCase().split(\" \");\n    const keyword = new RegExp(keywordList.join(\".*\"));\n    return (x.department + x.number + x.title).toLowerCase().match(keyword);\n  });\n\n  if (result.length === 0) {\n    response['status'] = false;\n  }\n\n  response[\"result\"] = result;\n  response[\"status\"] = true;\n};\n\nconst getDataFromBackEnd = (cmd, response, timeout) => {\n  if (cmd.type === \"data\") {\n    getReviewResponse(cmd.query, response);\n  } else if (cmd.type === \"search\") {\n    getSearchResponse(cmd.query, response);\n  }\n};\n\nexport default {\n  get: getDataFromBackEnd\n};","map":{"version":3,"sources":["/Users/jingkaisu/Documents/HRfront/HalliganReviews/web_project/src/fakeBackEnd.js"],"names":["fakeReviewData","fRD","fakeSearchData","fSD","getReviewResponse","query","response","department","number","subnumber","year","semester","queryStr","toLowerCase","data","filter","x","info","length","getSearchResponse","queryString","result","keywordList","split","keyword","RegExp","join","title","match","getDataFromBackEnd","cmd","timeout","type","get"],"mappings":"AAAA;AAEA,SAAQA,cAAc,IAAIC,GAA1B,EAAgCC,cAAc,IAAIC,GAAlD,QAA6D,YAA7D;;AAGA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAoB;AAC5C,MAAI;AAACC,IAAAA,UAAD;AAAaC,IAAAA,MAAb;AAAqBC,IAAAA,SAArB;AAAgCC,IAAAA,IAAhC;AAAsCC,IAAAA;AAAtC,MAAmDN,KAAvD;AAEA,QAAMO,QAAQ,GAAG,CAACL,UAAU,GAAGC,MAAb,GAAsBC,SAAtB,GAAkCE,QAAlC,GAA6CD,IAA9C,EAAoDG,WAApD,EAAjB;AAEA,MAAIC,IAAI,GAAGb,GAAG,CAACc,MAAJ,CAAYC,CAAD,IAAO;AAC3B,UAAMC,IAAI,GAAGD,CAAC,CAACC,IAAf;AACA,WACEL,QAAQ,KAAK,CAACK,IAAI,CAACV,UAAL,GAAkBU,IAAI,CAACT,MAAvB,GAAgCS,IAAI,CAACR,SAArC,GAAiDQ,IAAI,CAACN,QAAtD,GAAiEM,IAAI,CAACP,IAAvE,EAA6EG,WAA7E,EADf;AAGD,GALU,CAAX;;AAMA,MAAIC,IAAI,CAACI,MAAL,KAAgB,CAApB,EAAuB;AACrBZ,IAAAA,QAAQ,CAAC,QAAD,CAAR,GAAqB,KAArB;AACD;;AACDA,EAAAA,QAAQ,CAAC,QAAD,CAAR,GAAqB,IAArB;AACAA,EAAAA,QAAQ,CAAC,MAAD,CAAR,GAAmBQ,IAAI,CAAC,CAAD,CAAvB;AACD,CAhBD;;AAkBA,MAAMK,iBAAiB,GAAG,CAACd,KAAD,EAAQC,QAAR,KAAqB;AAC7C,QAAMM,QAAQ,GAAGP,KAAK,CAACe,WAAvB;AACA,QAAMC,MAAM,GAAGlB,GAAG,CAACY,MAAJ,CAAYC,CAAD,IAAO;AAC/B,UAAMM,WAAW,GAAGV,QAAQ,CAACC,WAAT,GAAuBU,KAAvB,CAA6B,GAA7B,CAApB;AACA,UAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAWH,WAAW,CAACI,IAAZ,CAAiB,IAAjB,CAAX,CAAhB;AACA,WAAO,CAACV,CAAC,CAACT,UAAF,GAAeS,CAAC,CAACR,MAAjB,GAA0BQ,CAAC,CAACW,KAA7B,EACJd,WADI,GAEJe,KAFI,CAEEJ,OAFF,CAAP;AAGD,GANc,CAAf;;AAOA,MAAIH,MAAM,CAACH,MAAP,KAAkB,CAAtB,EAAyB;AACvBZ,IAAAA,QAAQ,CAAC,QAAD,CAAR,GAAqB,KAArB;AACD;;AACDA,EAAAA,QAAQ,CAAC,QAAD,CAAR,GAAqBe,MAArB;AACAf,EAAAA,QAAQ,CAAC,QAAD,CAAR,GAAqB,IAArB;AACD,CAdD;;AAiBA,MAAMuB,kBAAkB,GAAG,CAACC,GAAD,EAAMxB,QAAN,EAAgByB,OAAhB,KAA4B;AACrD,MAAID,GAAG,CAACE,IAAJ,KAAa,MAAjB,EAAyB;AACvB5B,IAAAA,iBAAiB,CAAC0B,GAAG,CAACzB,KAAL,EAAYC,QAAZ,CAAjB;AACD,GAFD,MAEO,IAAIwB,GAAG,CAACE,IAAJ,KAAa,QAAjB,EAA2B;AAChCb,IAAAA,iBAAiB,CAACW,GAAG,CAACzB,KAAL,EAAYC,QAAZ,CAAjB;AACD;AACF,CAND;;AASA,eAAe;AACb2B,EAAAA,GAAG,EAAEJ;AADQ,CAAf","sourcesContent":["// import fakeDB from \"./fakeDataBase\";\n\nimport {fakeReviewData as fRD , fakeSearchData as fSD } from \"./fakeData\";\n\n\nconst getReviewResponse = (query, response) =>{\n  let {department, number, subnumber, year, semester} =  query;\n  \n  const queryStr = (department + number + subnumber + semester + year).toLowerCase();\n\n  let data = fRD.filter((x) => {\n    const info = x.info\n    return (\n      queryStr === (info.department + info.number + info.subnumber + info.semester + info.year).toLowerCase()\n    );\n  });\n  if (data.length === 0) {\n    response['status'] = false;\n  }\n  response['status'] = true;\n  response[\"data\"] = data[0]; \n}; \n\nconst getSearchResponse = (query, response) => {\n  const queryStr = query.queryString;\n  const result = fSD.filter((x) => {\n    const keywordList = queryStr.toLowerCase().split(\" \");\n    const keyword = new RegExp(keywordList.join(\".*\"));\n    return (x.department + x.number + x.title)\n      .toLowerCase()\n      .match(keyword);\n  });\n  if (result.length === 0) {\n    response['status'] = false;\n  }\n  response[\"result\"] = result;\n  response[\"status\"] = true;\n};\n  \n\nconst getDataFromBackEnd = (cmd, response, timeout) => {\n  if (cmd.type === \"data\") {\n    getReviewResponse(cmd.query, response);\n  } else if (cmd.type === \"search\") {\n    getSearchResponse(cmd.query, response);\n  }\n};\n\n\nexport default {\n  get: getDataFromBackEnd,\n};\n\n\n"]},"metadata":{},"sourceType":"module"}